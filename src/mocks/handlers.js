import { http, HttpResponse } from 'msw';
import { db } from '../db';

// --- Configuration ---
const DELAY_MS = 200;
const MAX_DELAY_MS = 1200;
const FAILURE_RATE = 0.1; // 10% chance of failure

// ðŸ›‘ CACHE-BUSTING HEADERS for GET requests ðŸ›‘
const NO_CACHE_HEADERS = {
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0',
};

// --- Utilities ---
const withLatency = async () => {
Â  const delay = Math.random() * (MAX_DELAY_MS - DELAY_MS) + DELAY_MS;
Â  await new Promise(resolve => setTimeout(resolve, delay));
};

const shouldFail = () => Math.random() < FAILURE_RATE;

// --- HANDLERS ARRAY ---
export const handlers = [
Â  // --- JOB HANDLERS ---
Â  
Â  // GET /jobs (List/Pagination/Filtering)
Â  http.get('/api/jobs', async ({ request }) => { 
Â  Â  try {
Â  Â  Â  await withLatency()
Â  Â  Â  const url = new URL(request.url)
Â  Â  Â  const titleSearch = url.searchParams.get('search') || ''
Â  Â  Â  const statusFilter = url.searchParams.get('status')
Â  Â  Â  const page = parseInt(url.searchParams.get('page')) || 1
Â  Â  Â  const pageSize = parseInt(url.searchParams.get('pageSize')) || 10

Â  Â  Â  let jobs = await db.jobs.toArray()
Â  Â  Â  
Â  Â  Â  // Filtering logic...
Â  Â  Â  if (titleSearch) {
Â  Â  Â  Â  jobs = jobs.filter(j => j.title.toLowerCase().includes(titleSearch.toLowerCase()))
Â  Â  Â  }
Â  Â  Â  if (statusFilter && statusFilter !== 'all') {
Â  Â  Â  Â  jobs = jobs.filter(j => j.status === statusFilter)
Â  Â  Â  }

Â  Â  Â  const totalCount = jobs.length
Â  Â  Â  const paginatedJobs = jobs.slice((page - 1) * pageSize, page * pageSize)

Â  Â  Â  return HttpResponse.json({
Â  Â  Â  Â  data: paginatedJobs,
Â  Â  Â  Â  total: totalCount
Â  Â  Â  }, { headers: NO_CACHE_HEADERS }) 
Â  Â  } catch (error) {
Â  Â  Â  console.error('Handler error:', error)
Â  Â  Â  return new HttpResponse(null, { status: 500 })
Â  Â  }
Â  }),
    
// GET /jobs/:id (Single Job Detail)
http.get('/api/jobs/:id', async ({ params }) => {
Â  Â  try {
Â  Â  Â  Â  await withLatency();
Â  Â  Â  Â  
Â  Â  Â  Â  // Use params.id since the router path likely defines it as :id (not :jobId)
Â  Â  Â  Â  const jobId = parseInt(params.id); 
Â  Â  Â  Â  
Â  Â  Â  Â  if (isNaN(jobId) || jobId <= 0) {
Â  Â  Â  Â  Â  Â  return new HttpResponse(null, { status: 400 });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  const job = await db.jobs.get(jobId);

Â  Â  Â  Â  if (!job) {
Â  Â  Â  Â  Â  Â  return new HttpResponse(null, { status: 404 });
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  return HttpResponse.json(job, { headers: NO_CACHE_HEADERS }); 
Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Error in GET /api/jobs/:id handler:', error);
Â  Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  }
}),
Â  
Â  // POST /jobs (Create job)
Â  http.post('/api/jobs', async ({ request }) => { 
Â  Â  await withLatency();
Â  Â  
Â  Â  if (shouldFail()) {
Â  Â  Â  return HttpResponse.json({ error: 'Simulated network error during job creation.' }, { status: 500 });
Â  Â  }
Â  Â  
Â  Â  const newJob = await request.json(); 
Â  Â  const allJobs = await db.jobs.toArray();
Â  Â  const maxOrder = allJobs.length > 0 ? Math.max(...allJobs.map(j => j.order)) : 0;

Â  Â  const id = await db.jobs.add({ 
Â  Â  Â  ...newJob, 
Â  Â  Â  id: undefined,
Â  Â  Â  status: 'active', 
Â  Â  Â  order: maxOrder + 1,
Â  Â  Â  createdAt: new Date().toISOString() 
Â  Â  });
Â  Â  
Â  Â  return HttpResponse.json(
Â  Â  Â  { id, ...newJob },
Â  Â  Â  { status: 201 }
Â  Â  );
Â  }),
Â  
Â  // PATCH /jobs/:id (Update job status)
Â  http.patch('/api/jobs/:id', async ({ params, request }) => {
Â  Â  try {
Â  Â  Â  await withLatency();

Â  Â  Â  if (shouldFail()) {
Â  Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  Â  }

Â  Â  Â  const { id } = params;
Â  Â  Â  const data = await request.json();
Â  Â  Â  
Â  Â  Â  await db.jobs.update(parseInt(id), { status: data.status });
Â  Â  Â  
Â  Â  Â  return HttpResponse.json({ success: true });
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error in PATCH /api/jobs/:id handler:', error);
Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  }
Â  }),
Â  
Â  // PATCH /jobs/:id/reorder (Reorder job)
Â  http.patch('/api/jobs/:id/reorder', async ({ params, request }) => { 
Â  Â  await withLatency();

Â  Â  if (Math.random() < 0.25) { 
Â  Â  Â  return HttpResponse.json({ error: 'Simulated reorder conflict error.' }, { status: 500 }); 
Â  Â  }
Â  Â  
Â  Â  const { id } = params;
Â  Â  const { fromOrder, toOrder } = await request.json();
Â  Â  const numId = parseInt(id);

Â  Â  await db.transaction('rw', db.jobs, async () => {
Â  Â  Â  Â  await db.jobs.update(numId, { order: toOrder });

Â  Â  Â  Â  if (fromOrder < toOrder) {
Â  Â  Â  Â  Â  Â  await db.jobs
Â  Â  Â  Â  Â  Â  Â  Â  .where('order').between(fromOrder + 1, toOrder)
Â  Â  Â  Â  Â  Â  Â  Â  .and(job => job.id !== numId)
Â  Â  Â  Â  Â  Â  Â  Â  .modify(job => job.order--);
Â  Â  Â  Â  } else if (fromOrder > toOrder) {
Â  Â  Â  Â  Â  Â  Â await db.jobs
Â  Â  Â  Â  Â  Â  Â  Â  .where('order').between(toOrder, fromOrder - 1)
Â  Â  Â  Â  Â  Â  Â  Â  .and(job => job.id !== numId)
Â  Â  Â  Â  Â  Â  Â  Â  .modify(job => job.order++);
Â  Â  Â  Â  }
Â  Â  });

Â  Â  return HttpResponse.json({ success: true });
Â  }),

Â  // --- CANDIDATE HANDLERS ---
Â  
Â  // GET /candidates (List/Pagination/Filtering)
Â  http.get('/api/candidates', async ({ request }) => { 
Â  Â  await withLatency();

Â  Â  const url = new URL(request.url);
Â  Â  const nameEmailSearch = url.searchParams.get('search') || '';
Â  Â  const stageFilter = url.searchParams.get('stage');
Â  Â  const page = parseInt(url.searchParams.get('page')) || 1;
Â  Â  const pageSize = 50; 

Â  Â  let candidates = await db.candidates.toArray();

    // Filtering logic...
Â  Â  if (nameEmailSearch) {
Â  Â  Â  Â  const query = nameEmailSearch.toLowerCase();
Â  Â  Â  Â  candidates = candidates.filter(c => 
Â  Â  Â  Â  Â  Â  c.name.toLowerCase().includes(query) || 
Â  Â  Â  Â  Â  Â  c.email.toLowerCase().includes(query)
Â  Â  Â  Â  );
Â  Â  }
Â  Â  
Â  Â  if (stageFilter) {
Â  Â  Â  candidates = candidates.filter(c => c.stage === stageFilter);
Â  Â  }

Â  Â  const totalCount = candidates.length;
Â  Â  const paginatedCandidates = candidates.slice((page - 1) * pageSize, page * pageSize);
Â  Â  
Â  Â  return HttpResponse.json(
Â  Â  Â  paginatedCandidates,
Â  Â  Â  { 
Â  Â  Â  Â  status: 200,
Â  Â  Â  Â  headers: { 'X-Total-Count': totalCount.toString(), ...NO_CACHE_HEADERS }
Â  Â  Â  }
Â  Â  );
Â  }),
Â  
Â  // GET /candidates/:id (Single Candidate Profile)
Â  http.get('/api/candidates/:id', async ({ params }) => {
Â  Â  try {
Â  Â  Â  await withLatency();
Â  Â  Â  
Â  Â  Â  const { id } = params;
Â  Â  Â  const numId = parseInt(id);

Â  Â  Â  if (shouldFail()) {
Â  Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  const candidate = await db.candidates.get(numId);
Â  Â  Â  
Â  Â  Â  if (!candidate) {
Â  Â  Â  Â  return new HttpResponse(null, { status: 404 });
Â  Â  Â  }

Â  Â  Â  // Fetch notes (which are stored in the timeline with type 'note')
Â  Â  Â  const notes = await db.timeline 
Â  Â  Â  Â  Â  .where({ candidateId: numId, type: 'note' }) 
Â  Â  Â  Â  Â  .sortBy('timestamp');

Â  Â  Â  // Combine and return candidate with their notes
Â  Â  Â  return HttpResponse.json({ ...candidate, notes }, { headers: NO_CACHE_HEADERS });
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error in GET /api/candidates/:id handler:', error);
Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  }
Â  }),

Â  // PATCH /candidates/:id (Stage transitions)
Â  http.patch('/api/candidates/:id', async ({ params, request }) => {
Â  Â  await withLatency();

Â  Â  if (shouldFail()) {
Â  Â  Â  return HttpResponse.json({ error: 'Simulated network error during candidate update.' }, { status: 500 });
Â  Â  }
Â  Â  
Â  Â  const { id } = params;
Â  Â  const updates = await request.json();
Â  Â  const numId = parseInt(id);

Â  Â  // 1. Update candidate stage
Â  Â  await db.candidates.update(numId, updates);
Â  Â  
Â  Â  // 2. Log timeline change
Â  Â  if (updates.stage) {
Â  Â  Â  Â  await db.timeline.add({
Â  Â  Â  Â  Â  Â  candidateId: numId,
Â  Â  Â  Â  Â  Â  type: 'stage_change',
Â  Â  Â  Â  Â  Â  details: `Moved to ${updates.stage}`,
Â  Â  Â  Â  Â  Â  timestamp: new Date().toISOString(),
Â  Â  Â  Â  });
Â  Â  }

Â  Â  return HttpResponse.json({ id: numId, ...updates });
Â  }),

Â  // GET /candidates/:id/timeline (Fetch all events: stages, notes, etc.)
Â  http.get('/api/candidates/:id/timeline', async ({ params }) => {
Â  Â  await withLatency();
Â  Â  const { id } = params;
Â  Â  const numId = parseInt(id);

Â  Â  const timelineEvents = await db.timeline
Â  Â  Â  Â  .where('candidateId').equals(numId)
Â  Â  Â  Â  .sortBy('timestamp');

Â  Â  return HttpResponse.json(timelineEvents, { headers: NO_CACHE_HEADERS });
Â  }),
Â  Â  
Â  // POST /candidates/:id/notes (Add a new note to the timeline)
Â  http.post('/api/candidates/:id/notes', async ({ params, request }) => {
Â  Â  Â  await withLatency();
Â  Â  Â  if (shouldFail()) {
Â  Â  Â  Â  return HttpResponse.json({ error: 'Simulated error posting note.' }, { status: 500 });
Â  Â  Â  }
Â  Â  Â  
Â  Â  Â  const { id } = params;
Â  Â  Â  const { text, author } = await request.json();
Â  Â  Â  const numId = parseInt(id);

Â  Â  Â  const noteId = await db.timeline.add({
Â  Â  Â  Â  Â  candidateId: numId,
Â  Â  Â  Â  Â  type: 'note',
Â  Â  Â  Â  Â  details: text,
Â  Â  Â  Â  Â  author,
Â  Â  Â  Â  Â  timestamp: new Date().toISOString(),
Â  Â  Â  });
Â  Â  Â  
Â  Â  Â  return HttpResponse.json({ id: noteId, text, author, type: 'note' }, { status: 201 });
Â  }),

// POST /candidates (Apply to job)
Â  http.post('/api/candidates', async ({ request }) => {
Â  Â  try {
Â  Â  Â  await withLatency();
Â  Â  Â  // ... (application logic)
Â  Â  Â  return HttpResponse.json(
Â  Â  Â  Â  { id, ...newCandidateData, stage: 'applied' },
Â  Â  Â  Â  { status: 201 }
Â  Â  Â  );
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error in POST /candidates:', error);
Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  }
Â  }),


Â  // --- ASSESSMENT HANDLERS ---

Â  // GET /assessments/:jobId
Â  http.get('/api/assessments/:jobId', async ({ params }) => {
Â  Â  try {
Â  Â  Â  await withLatency();
Â  Â  Â  const { jobId } = params;
Â  Â  Â  const numId = parseInt(jobId);

Â  Â  Â  const assessment = await db.assessments.get(numId);
Â  Â  Â  
Â  Â  Â  if (!assessment) {
Â  Â  Â  Â  return HttpResponse.json({ jobId: numId, sections: [] }, { headers: NO_CACHE_HEADERS });
Â  Â  Â  }

Â  Â  Â  return HttpResponse.json(assessment, { headers: NO_CACHE_HEADERS });
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error in GET /assessments/:jobId:', error);
Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  }
Â  }),

Â  // PUT /assessments/:jobId
Â  http.put('/api/assessments/:jobId', async ({ params, request }) => {
Â  Â  try {
Â  Â  Â  // ... (logic is correct)
Â  Â  Â  return HttpResponse.json({ success: true, jobId: numId });
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error in PUT /assessments/:jobId:', error);
Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  }
Â  }),

Â  // POST /assessments/:jobId/submit
Â  http.post('/api/assessments/:jobId/submit', async ({ params, request }) => {
Â  Â  try {
Â  Â  Â  // ... (logic is correct)
Â  Â  Â  return HttpResponse.json(
Â  Â  Â  Â  { success: true, submissionId },
Â  Â  Â  Â  { status: 201 }
Â  Â  Â  );
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error in POST /assessments/:jobId/submit:', error);
Â  Â  Â  return new HttpResponse(null, { status: 500 });
Â  Â  }
Â  }),
];